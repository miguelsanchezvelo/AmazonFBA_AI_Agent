"""Generate a supplier inquiry message for the top selected product."""

from __future__ import annotations

import csv
import os
import subprocess
import sys
from typing import Dict, Optional


def ensure_openai_installed() -> None:
    """Import openai, installing it if necessary."""

    try:
        import openai  # type: ignore
    except Exception:  # pragma: no cover - installation
        subprocess.check_call([sys.executable, "-m", "pip", "install", "openai"])
    finally:
        global openai  # type: ignore
        import openai  # type: ignore


def ensure_dotenv_installed() -> None:
    """Import python-dotenv, installing it if needed."""

    try:
        from dotenv import load_dotenv  # type: ignore
    except Exception:  # pragma: no cover - installation
        subprocess.check_call([sys.executable, "-m", "pip", "install", "python-dotenv"])
    finally:
        global load_dotenv  # type: ignore
        from dotenv import load_dotenv  # type: ignore


INPUT_CSV = os.path.join("data", "supplier_selection_results.csv")
OUTPUT_DIR = "outputs"


def load_top_product(path: str) -> Optional[Dict[str, str]]:
    """Return the first CSV row with units to order greater than zero."""

    if not os.path.exists(path):
        return None

    with open(path, newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            units_str = row.get("units_to_order") or row.get("Units") or row.get("units")
            try:
                units = int(float(units_str)) if units_str else 0
            except ValueError:
                units = 0
            if units > 0:
                return row
    return None


def generate_message(title: str) -> str:
    """Return a formal supplier inquiry generated by ChatGPT."""

    system = {
        "role": "system",
        "content": (
            "You are an assistant that writes short, formal sourcing inquiries in English."
        ),
    }
    user = {
        "role": "user",
        "content": (
            "Write a formal email to a supplier about the product titled '"
            + title
            + "'. Ask for minimum order quantity, unit price and lead time. "
            "Request a catalogue of similar products. Sign the email as Carlos Ruiz "
            "(sourcing@example.com) from Spain."
        ),
    }

    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[system, user])
    return resp["choices"][0]["message"]["content"].strip()


def main() -> None:
    ensure_openai_installed()
    ensure_dotenv_installed()

    load_dotenv()
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise SystemExit("OPENAI_API_KEY not found in .env")

    openai.api_key = api_key  # type: ignore

    product = load_top_product(INPUT_CSV)
    if not product:
        print("No products with Units > 0 were found.")
        return

    asin = product.get("asin", "unknown")
    title = product.get("title", "")

    try:
        message = generate_message(title)
    except Exception as exc:  # pragma: no cover - network
        print(f"Failed to generate message: {exc}")
        return

    os.makedirs(OUTPUT_DIR, exist_ok=True)
    out_path = os.path.join(OUTPUT_DIR, f"supplier_contact_{asin}.txt")
    try:
        with open(out_path, "w", encoding="utf-8") as f:
            f.write(f"ASIN: {asin}\nTitle: {title}\n\n{message}\n")
    except Exception as exc:
        print(f"Error saving message: {exc}")
        return

    print(f"Supplier contact message saved to {out_path}")


if __name__ == "__main__":
    main()

